#include<iostream>
#include<cstdio>
#include<cstring>
#include<queue>
#include<vector>
using namespace std;
const char *dirs="NESW", *turns="FLR";
int dir_id(char c) {return strchr(dirs, c)-dirs;}
int turn_id(char c) {return strchr(turns, c)-turns;}
const int dr[]={-1, 0, 1, 0}, dc[]={0, 1, 0, -1};
int have_edge[10][10][4][3], d[10][10][4], r0, c0, r1, c1, init_dir, r2, c2;
struct Node{
	int r, c, dir;
	Node(int x=0, int y=0, int p=0)
	{
		this->r = x; this->c = y;
		this->dir = p;
	}
};
Node p[10][10][4];
bool input()
{
	char s1[101], s2[101];
	if(scanf("%s %d %d %s %d %d", &s1, &r0, &c0, &s2, &r2, &c2)!=6)
		return false;
	init_dir = dir_id(s2[0]); r1 = r0+dr[init_dir];	c1 = c0+dc[init_dir];
	for(;;)
	{
		int r, c;
		scanf("%d", &r);  if(r==0) break;	scanf("%d", &c);
		while(scanf("%s", &s2)&&s2[0]!='*')
		{
			for(int i=1; i<strlen(s2); i++)
				have_edge[r][c][dir_id(s2[0])][turn_id(s2[i])] = 1;
		}
	}
	printf("%s", s1);
	return true;
}
Node walk(const Node &u, int turn)
{
	int dir=u.dir;
	if(turn==1) dir = (u.dir+3)%4;
	if(turn==2)	dir = (u.dir+1)%4;
	return Node(u.r+dr[dir], u.c+dc[dir], dir);
}
void print_ans(Node u)
{
	vector<Node> ans;
	for(;;)
	{
		ans.push_back(u);
		if(d[u.r][u.c][u.dir]==0)
			break;
		u = p[u.r][u.c][u.dir];
	}
	ans.push_back(Node(r0, c0, init_dir));
	int cnt=0;
	for(int i=ans.size()-1; i>=0; i--)
	{
		if(cnt++%10==0)	printf("\n");
		else printf(" ");
		printf("(%d,%d)", ans[i].r, ans[i].c);
	}
	printf("\n");
}
bool inside(int r, int c) {return r>=1&&c>=1&&r<=9&&c<=9;}
void solve()
{
	queue<Node> Q;
	memset(d, -1, sizeof(d));
	d[r1][c1][init_dir] = 0;
	Node u(r1, c1, init_dir);
	Q.push(u);
	while(!Q.empty())
	{
		Node u=Q.front(); Q.pop();
		if(u.r==r2&&u.c==c2)
		{
			print_ans(u);
			return;
		}
		for(int i=0; i<3; i++)
		{
			Node v;
			if(have_edge[u.r][u.c][u.dir][i])
				v = walk(u, i);
			if(inside(v.r, v.c)&&d[v.r][v.c][v.dir]<0)
			{
				d[v.r][v.c][v.dir] = d[u.r][u.c][u.dir]+1;
				p[v.r][v.c][v.dir] = u; Q.push(v);
			}
		}
	}
	printf("\nNo Solution Possible\n");
}
int main()
{
	while(input())
		solve();
	return 0;
}
